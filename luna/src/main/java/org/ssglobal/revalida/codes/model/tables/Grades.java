/*
 * This file is generated by jOOQ.
 */
package org.ssglobal.revalida.codes.model.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.ssglobal.revalida.codes.model.Keys;
import org.ssglobal.revalida.codes.model.Public;
import org.ssglobal.revalida.codes.model.tables.records.GradesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Grades extends TableImpl<GradesRecord> {

    private static final long serialVersionUID = -747647745;

    /**
     * The reference instance of <code>public.grades</code>
     */
    public static final Grades GRADES = new Grades();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GradesRecord> getRecordType() {
        return GradesRecord.class;
    }

    /**
     * The column <code>public.grades.grade_id</code>.
     */
    public final TableField<GradesRecord, Integer> GRADE_ID = createField(DSL.name("grade_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.grades.grade</code>.
     */
    public final TableField<GradesRecord, Integer> GRADE = createField(DSL.name("grade"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.grades.comment</code>.
     */
    public final TableField<GradesRecord, String> COMMENT = createField(DSL.name("comment"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.grades.date_modified</code>.
     */
    public final TableField<GradesRecord, LocalDate> DATE_MODIFIED = createField(DSL.name("date_modified"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.grades.remarks</code>.
     */
    public final TableField<GradesRecord, String> REMARKS = createField(DSL.name("remarks"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.grades.status</code>.
     */
    public final TableField<GradesRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * Create a <code>public.grades</code> table reference
     */
    public Grades() {
        this(DSL.name("grades"), null);
    }

    /**
     * Create an aliased <code>public.grades</code> table reference
     */
    public Grades(String alias) {
        this(DSL.name(alias), GRADES);
    }

    /**
     * Create an aliased <code>public.grades</code> table reference
     */
    public Grades(Name alias) {
        this(alias, GRADES);
    }

    private Grades(Name alias, Table<GradesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Grades(Name alias, Table<GradesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Grades(Table<O> child, ForeignKey<O, GradesRecord> key) {
        super(child, key, GRADES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<GradesRecord> getPrimaryKey() {
        return Keys.GRADES_PKEY;
    }

    @Override
    public List<UniqueKey<GradesRecord>> getKeys() {
        return Arrays.<UniqueKey<GradesRecord>>asList(Keys.GRADES_PKEY);
    }

    @Override
    public Grades as(String alias) {
        return new Grades(DSL.name(alias), this);
    }

    @Override
    public Grades as(Name alias) {
        return new Grades(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Grades rename(String name) {
        return new Grades(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Grades rename(Name name) {
        return new Grades(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, String, LocalDate, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
