/*
 * This file is generated by jOOQ.
 */
package org.ssglobal.revalida.codes.model.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;
import org.ssglobal.revalida.codes.model.tables.Parent;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ParentRecord extends UpdatableRecordImpl<ParentRecord> implements Record7<Integer, Integer, String, String, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.parent.parent_id</code>.
     */
    public ParentRecord setParentId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.parent.parent_id</code>.
     */
    public Integer getParentId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.parent.student_id</code>.
     */
    public ParentRecord setStudentId(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.parent.student_id</code>.
     */
    public Integer getStudentId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.parent.username</code>.
     */
    public ParentRecord setUsername(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.parent.username</code>.
     */
    public String getUsername() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.parent.password</code>.
     */
    public ParentRecord setPassword(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.parent.password</code>.
     */
    public String getPassword() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.parent.firstname</code>.
     */
    public ParentRecord setFirstname(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.parent.firstname</code>.
     */
    public String getFirstname() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.parent.lastname</code>.
     */
    public ParentRecord setLastname(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.parent.lastname</code>.
     */
    public String getLastname() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.parent.type</code>.
     */
    public ParentRecord setType(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.parent.type</code>.
     */
    public String getType() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Integer, Integer, String, String, String, String, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Parent.PARENT.PARENT_ID;
    }

    @Override
    public Field<Integer> field2() {
        return Parent.PARENT.STUDENT_ID;
    }

    @Override
    public Field<String> field3() {
        return Parent.PARENT.USERNAME;
    }

    @Override
    public Field<String> field4() {
        return Parent.PARENT.PASSWORD;
    }

    @Override
    public Field<String> field5() {
        return Parent.PARENT.FIRSTNAME;
    }

    @Override
    public Field<String> field6() {
        return Parent.PARENT.LASTNAME;
    }

    @Override
    public Field<String> field7() {
        return Parent.PARENT.TYPE;
    }

    @Override
    public Integer component1() {
        return getParentId();
    }

    @Override
    public Integer component2() {
        return getStudentId();
    }

    @Override
    public String component3() {
        return getUsername();
    }

    @Override
    public String component4() {
        return getPassword();
    }

    @Override
    public String component5() {
        return getFirstname();
    }

    @Override
    public String component6() {
        return getLastname();
    }

    @Override
    public String component7() {
        return getType();
    }

    @Override
    public Integer value1() {
        return getParentId();
    }

    @Override
    public Integer value2() {
        return getStudentId();
    }

    @Override
    public String value3() {
        return getUsername();
    }

    @Override
    public String value4() {
        return getPassword();
    }

    @Override
    public String value5() {
        return getFirstname();
    }

    @Override
    public String value6() {
        return getLastname();
    }

    @Override
    public String value7() {
        return getType();
    }

    @Override
    public ParentRecord value1(Integer value) {
        setParentId(value);
        return this;
    }

    @Override
    public ParentRecord value2(Integer value) {
        setStudentId(value);
        return this;
    }

    @Override
    public ParentRecord value3(String value) {
        setUsername(value);
        return this;
    }

    @Override
    public ParentRecord value4(String value) {
        setPassword(value);
        return this;
    }

    @Override
    public ParentRecord value5(String value) {
        setFirstname(value);
        return this;
    }

    @Override
    public ParentRecord value6(String value) {
        setLastname(value);
        return this;
    }

    @Override
    public ParentRecord value7(String value) {
        setType(value);
        return this;
    }

    @Override
    public ParentRecord values(Integer value1, Integer value2, String value3, String value4, String value5, String value6, String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ParentRecord
     */
    public ParentRecord() {
        super(Parent.PARENT);
    }

    /**
     * Create a detached, initialised ParentRecord
     */
    public ParentRecord(Integer parentId, Integer studentId, String username, String password, String firstname, String lastname, String type) {
        super(Parent.PARENT);

        setParentId(parentId);
        setStudentId(studentId);
        setUsername(username);
        setPassword(password);
        setFirstname(firstname);
        setLastname(lastname);
        setType(type);
    }

    /**
     * Create a detached, initialised ParentRecord
     */
    public ParentRecord(org.ssglobal.revalida.codes.model.tables.pojos.Parent value) {
        super(Parent.PARENT);

        if (value != null) {
            setParentId(value.getParentId());
            setStudentId(value.getStudentId());
            setUsername(value.getUsername());
            setPassword(value.getPassword());
            setFirstname(value.getFirstname());
            setLastname(value.getLastname());
            setType(value.getType());
        }
    }
}
