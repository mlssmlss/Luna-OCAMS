/*
 * This file is generated by jOOQ.
 */
package org.ssglobal.revalida.codes.model.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.ssglobal.revalida.codes.model.Keys;
import org.ssglobal.revalida.codes.model.Public;
import org.ssglobal.revalida.codes.model.tables.records.ProgramRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Program extends TableImpl<ProgramRecord> {

    private static final long serialVersionUID = -153727966;

    /**
     * The reference instance of <code>public.program</code>
     */
    public static final Program PROGRAM = new Program();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProgramRecord> getRecordType() {
        return ProgramRecord.class;
    }

    /**
     * The column <code>public.program.program_id</code>.
     */
    public final TableField<ProgramRecord, Integer> PROGRAM_ID = createField(DSL.name("program_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.program.program_code</code>.
     */
    public final TableField<ProgramRecord, Integer> PROGRAM_CODE = createField(DSL.name("program_code"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.program.program_title</code>.
     */
    public final TableField<ProgramRecord, String> PROGRAM_TITLE = createField(DSL.name("program_title"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.program.major</code>.
     */
    public final TableField<ProgramRecord, String> MAJOR = createField(DSL.name("major"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * Create a <code>public.program</code> table reference
     */
    public Program() {
        this(DSL.name("program"), null);
    }

    /**
     * Create an aliased <code>public.program</code> table reference
     */
    public Program(String alias) {
        this(DSL.name(alias), PROGRAM);
    }

    /**
     * Create an aliased <code>public.program</code> table reference
     */
    public Program(Name alias) {
        this(alias, PROGRAM);
    }

    private Program(Name alias, Table<ProgramRecord> aliased) {
        this(alias, aliased, null);
    }

    private Program(Name alias, Table<ProgramRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Program(Table<O> child, ForeignKey<O, ProgramRecord> key) {
        super(child, key, PROGRAM);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ProgramRecord> getPrimaryKey() {
        return Keys.PROGRAM_PKEY;
    }

    @Override
    public List<UniqueKey<ProgramRecord>> getKeys() {
        return Arrays.<UniqueKey<ProgramRecord>>asList(Keys.PROGRAM_PKEY);
    }

    @Override
    public Program as(String alias) {
        return new Program(DSL.name(alias), this);
    }

    @Override
    public Program as(Name alias) {
        return new Program(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Program rename(String name) {
        return new Program(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Program rename(Name name) {
        return new Program(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
