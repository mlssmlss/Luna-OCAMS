/*
 * This file is generated by jOOQ.
 */
package org.ssglobal.revalida.codes.model.tables;


import java.time.LocalDate;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.ssglobal.revalida.codes.model.Keys;
import org.ssglobal.revalida.codes.model.Public;
import org.ssglobal.revalida.codes.model.tables.records.ProfessorRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Professor extends TableImpl<ProfessorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.professor</code>
     */
    public static final Professor PROFESSOR = new Professor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProfessorRecord> getRecordType() {
        return ProfessorRecord.class;
    }

    /**
     * The column <code>public.professor.professor_id</code>.
     */
    public final TableField<ProfessorRecord, Integer> PROFESSOR_ID = createField(DSL.name("professor_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.professor.professor_name</code>.
     */
    public final TableField<ProfessorRecord, String> PROFESSOR_NAME = createField(DSL.name("professor_name"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.professor.professor_number</code>.
     */
    public final TableField<ProfessorRecord, Integer> PROFESSOR_NUMBER = createField(DSL.name("professor_number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.professor.work</code>.
     */
    public final TableField<ProfessorRecord, String> WORK = createField(DSL.name("work"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.professor.gender</code>.
     */
    public final TableField<ProfessorRecord, String> GENDER = createField(DSL.name("gender"), SQLDataType.VARCHAR(5).nullable(false), this, "");

    /**
     * The column <code>public.professor.status</code>.
     */
    public final TableField<ProfessorRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.professor.birthdate</code>.
     */
    public final TableField<ProfessorRecord, LocalDate> BIRTHDATE = createField(DSL.name("birthdate"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.professor.professor_load</code>.
     */
    public final TableField<ProfessorRecord, String> PROFESSOR_LOAD = createField(DSL.name("professor_load"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.professor.grades</code>.
     */
    public final TableField<ProfessorRecord, Integer> GRADES = createField(DSL.name("grades"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.professor.subject_details</code>.
     */
    public final TableField<ProfessorRecord, String> SUBJECT_DETAILS = createField(DSL.name("subject_details"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    private Professor(Name alias, Table<ProfessorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Professor(Name alias, Table<ProfessorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.professor</code> table reference
     */
    public Professor(String alias) {
        this(DSL.name(alias), PROFESSOR);
    }

    /**
     * Create an aliased <code>public.professor</code> table reference
     */
    public Professor(Name alias) {
        this(alias, PROFESSOR);
    }

    /**
     * Create a <code>public.professor</code> table reference
     */
    public Professor() {
        this(DSL.name("professor"), null);
    }

    public <O extends Record> Professor(Table<O> child, ForeignKey<O, ProfessorRecord> key) {
        super(child, key, PROFESSOR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ProfessorRecord> getPrimaryKey() {
        return Keys.PROFESSOR_PKEY;
    }

    @Override
    public Professor as(String alias) {
        return new Professor(DSL.name(alias), this);
    }

    @Override
    public Professor as(Name alias) {
        return new Professor(alias, this);
    }

    @Override
    public Professor as(Table<?> alias) {
        return new Professor(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Professor rename(String name) {
        return new Professor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Professor rename(Name name) {
        return new Professor(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Professor rename(Table<?> name) {
        return new Professor(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, Integer, String, String, String, LocalDate, String, Integer, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Integer, ? super String, ? super Integer, ? super String, ? super String, ? super String, ? super LocalDate, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Integer, ? super String, ? super Integer, ? super String, ? super String, ? super String, ? super LocalDate, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
