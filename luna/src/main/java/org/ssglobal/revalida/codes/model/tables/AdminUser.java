/*
 * This file is generated by jOOQ.
 */
package org.ssglobal.revalida.codes.model.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.ssglobal.revalida.codes.model.Keys;
import org.ssglobal.revalida.codes.model.Public;
import org.ssglobal.revalida.codes.model.tables.records.AdminUserRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdminUser extends TableImpl<AdminUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.admin_user</code>
     */
    public static final AdminUser ADMIN_USER = new AdminUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminUserRecord> getRecordType() {
        return AdminUserRecord.class;
    }

    /**
     * The column <code>public.admin_user.lastname</code>.
     */
    public final TableField<AdminUserRecord, String> LASTNAME = createField(DSL.name("lastname"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.admin_user.firstname</code>.
     */
    public final TableField<AdminUserRecord, String> FIRSTNAME = createField(DSL.name("firstname"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.admin_user.admin_id</code>.
     */
    public final TableField<AdminUserRecord, Integer> ADMIN_ID = createField(DSL.name("admin_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.admin_user.username</code>.
     */
    public final TableField<AdminUserRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.admin_user.password</code>.
     */
    public final TableField<AdminUserRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.admin_user.type</code>.
     */
    public final TableField<AdminUserRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    private AdminUser(Name alias, Table<AdminUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private AdminUser(Name alias, Table<AdminUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.admin_user</code> table reference
     */
    public AdminUser(String alias) {
        this(DSL.name(alias), ADMIN_USER);
    }

    /**
     * Create an aliased <code>public.admin_user</code> table reference
     */
    public AdminUser(Name alias) {
        this(alias, ADMIN_USER);
    }

    /**
     * Create a <code>public.admin_user</code> table reference
     */
    public AdminUser() {
        this(DSL.name("admin_user"), null);
    }

    public <O extends Record> AdminUser(Table<O> child, ForeignKey<O, AdminUserRecord> key) {
        super(child, key, ADMIN_USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AdminUserRecord> getPrimaryKey() {
        return Keys.ADMIN_USER_PKEY;
    }

    @Override
    public AdminUser as(String alias) {
        return new AdminUser(DSL.name(alias), this);
    }

    @Override
    public AdminUser as(Name alias) {
        return new AdminUser(alias, this);
    }

    @Override
    public AdminUser as(Table<?> alias) {
        return new AdminUser(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminUser rename(String name) {
        return new AdminUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminUser rename(Name name) {
        return new AdminUser(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminUser rename(Table<?> name) {
        return new AdminUser(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, Integer, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super String, ? super String, ? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super String, ? super String, ? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
