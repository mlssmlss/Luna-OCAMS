/*
 * This file is generated by jOOQ.
 */
package org.ssglobal.revalida.codes.model.tables;


import java.time.LocalDate;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.ssglobal.revalida.codes.model.Keys;
import org.ssglobal.revalida.codes.model.Public;
import org.ssglobal.revalida.codes.model.tables.records.SubjectDetailHistoryRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SubjectDetailHistory extends TableImpl<SubjectDetailHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.subject_detail_history</code>
     */
    public static final SubjectDetailHistory SUBJECT_DETAIL_HISTORY = new SubjectDetailHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubjectDetailHistoryRecord> getRecordType() {
        return SubjectDetailHistoryRecord.class;
    }

    /**
     * The column <code>public.subject_detail_history.session_id</code>.
     */
    public final TableField<SubjectDetailHistoryRecord, Integer> SESSION_ID = createField(DSL.name("session_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.subject_detail_history.professor_id</code>.
     */
    public final TableField<SubjectDetailHistoryRecord, Integer> PROFESSOR_ID = createField(DSL.name("professor_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.subject_detail_history.subject_id</code>.
     */
    public final TableField<SubjectDetailHistoryRecord, Integer> SUBJECT_ID = createField(DSL.name("subject_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.subject_detail_history.academic_year</code>.
     */
    public final TableField<SubjectDetailHistoryRecord, Integer> ACADEMIC_YEAR = createField(DSL.name("academic_year"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.subject_detail_history.semester</code>.
     */
    public final TableField<SubjectDetailHistoryRecord, String> SEMESTER = createField(DSL.name("semester"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.subject_detail_history.schedule</code>.
     */
    public final TableField<SubjectDetailHistoryRecord, LocalDate> SCHEDULE = createField(DSL.name("schedule"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.subject_detail_history.section</code>.
     */
    public final TableField<SubjectDetailHistoryRecord, String> SECTION = createField(DSL.name("section"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.subject_detail_history.year_level</code>.
     */
    public final TableField<SubjectDetailHistoryRecord, Integer> YEAR_LEVEL = createField(DSL.name("year_level"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.subject_detail_history.status</code>.
     */
    public final TableField<SubjectDetailHistoryRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.subject_detail_history.active_deactive</code>.
     */
    public final TableField<SubjectDetailHistoryRecord, Boolean> ACTIVE_DEACTIVE = createField(DSL.name("active_deactive"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private SubjectDetailHistory(Name alias, Table<SubjectDetailHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private SubjectDetailHistory(Name alias, Table<SubjectDetailHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.subject_detail_history</code> table
     * reference
     */
    public SubjectDetailHistory(String alias) {
        this(DSL.name(alias), SUBJECT_DETAIL_HISTORY);
    }

    /**
     * Create an aliased <code>public.subject_detail_history</code> table
     * reference
     */
    public SubjectDetailHistory(Name alias) {
        this(alias, SUBJECT_DETAIL_HISTORY);
    }

    /**
     * Create a <code>public.subject_detail_history</code> table reference
     */
    public SubjectDetailHistory() {
        this(DSL.name("subject_detail_history"), null);
    }

    public <O extends Record> SubjectDetailHistory(Table<O> child, ForeignKey<O, SubjectDetailHistoryRecord> key) {
        super(child, key, SUBJECT_DETAIL_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SubjectDetailHistoryRecord> getPrimaryKey() {
        return Keys.SUBJECT_DETAIL_HISTORY_PKEY;
    }

    @Override
    public SubjectDetailHistory as(String alias) {
        return new SubjectDetailHistory(DSL.name(alias), this);
    }

    @Override
    public SubjectDetailHistory as(Name alias) {
        return new SubjectDetailHistory(alias, this);
    }

    @Override
    public SubjectDetailHistory as(Table<?> alias) {
        return new SubjectDetailHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SubjectDetailHistory rename(String name) {
        return new SubjectDetailHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SubjectDetailHistory rename(Name name) {
        return new SubjectDetailHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SubjectDetailHistory rename(Table<?> name) {
        return new SubjectDetailHistory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, Integer, Integer, Integer, String, LocalDate, String, Integer, String, Boolean> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super String, ? super LocalDate, ? super String, ? super Integer, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super String, ? super LocalDate, ? super String, ? super Integer, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
