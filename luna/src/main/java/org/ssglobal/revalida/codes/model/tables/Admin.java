/*
 * This file is generated by jOOQ.
 */
package org.ssglobal.revalida.codes.model.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.ssglobal.revalida.codes.model.Keys;
import org.ssglobal.revalida.codes.model.Public;
import org.ssglobal.revalida.codes.model.tables.records.AdminRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Admin extends TableImpl<AdminRecord> {

    private static final long serialVersionUID = 663955252;

    /**
     * The reference instance of <code>public.admin</code>
     */
    public static final Admin ADMIN = new Admin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminRecord> getRecordType() {
        return AdminRecord.class;
    }

    /**
     * The column <code>public.admin.admin_id</code>.
     */
    public final TableField<AdminRecord, Integer> ADMIN_ID = createField(DSL.name("admin_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.admin.username</code>.
     */
    public final TableField<AdminRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.admin.password</code>.
     */
    public final TableField<AdminRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR(250).nullable(false), this, "");

    /**
     * The column <code>public.admin.firstname</code>.
     */
    public final TableField<AdminRecord, String> FIRSTNAME = createField(DSL.name("firstname"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.admin.lastname</code>.
     */
    public final TableField<AdminRecord, String> LASTNAME = createField(DSL.name("lastname"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.admin.type</code>.
     */
    public final TableField<AdminRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.admin.student_id</code>.
     */
    public final TableField<AdminRecord, Integer> STUDENT_ID = createField(DSL.name("student_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.admin.parent_id</code>.
     */
    public final TableField<AdminRecord, Integer> PARENT_ID = createField(DSL.name("parent_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.admin.professor_id</code>.
     */
    public final TableField<AdminRecord, Integer> PROFESSOR_ID = createField(DSL.name("professor_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.admin</code> table reference
     */
    public Admin() {
        this(DSL.name("admin"), null);
    }

    /**
     * Create an aliased <code>public.admin</code> table reference
     */
    public Admin(String alias) {
        this(DSL.name(alias), ADMIN);
    }

    /**
     * Create an aliased <code>public.admin</code> table reference
     */
    public Admin(Name alias) {
        this(alias, ADMIN);
    }

    private Admin(Name alias, Table<AdminRecord> aliased) {
        this(alias, aliased, null);
    }

    private Admin(Name alias, Table<AdminRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Admin(Table<O> child, ForeignKey<O, AdminRecord> key) {
        super(child, key, ADMIN);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<AdminRecord> getPrimaryKey() {
        return Keys.ADMIN_PKEY;
    }

    @Override
    public List<UniqueKey<AdminRecord>> getKeys() {
        return Arrays.<UniqueKey<AdminRecord>>asList(Keys.ADMIN_PKEY);
    }

    @Override
    public List<ForeignKey<AdminRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AdminRecord, ?>>asList(Keys.ADMIN__ADMIN_STUDENT_ID_FKEY, Keys.ADMIN__ADMIN_PARENT_ID_FKEY, Keys.ADMIN__ADMIN_PROFESSOR_ID_FKEY);
    }

    public Student student() {
        return new Student(this, Keys.ADMIN__ADMIN_STUDENT_ID_FKEY);
    }

    public Parent parent() {
        return new Parent(this, Keys.ADMIN__ADMIN_PARENT_ID_FKEY);
    }

    public Professor professor() {
        return new Professor(this, Keys.ADMIN__ADMIN_PROFESSOR_ID_FKEY);
    }

    @Override
    public Admin as(String alias) {
        return new Admin(DSL.name(alias), this);
    }

    @Override
    public Admin as(Name alias) {
        return new Admin(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Admin rename(String name) {
        return new Admin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Admin rename(Name name) {
        return new Admin(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, String, String, String, String, Integer, Integer, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
