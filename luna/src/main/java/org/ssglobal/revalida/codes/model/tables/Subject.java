/*
 * This file is generated by jOOQ.
 */
package org.ssglobal.revalida.codes.model.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.ssglobal.revalida.codes.model.Keys;
import org.ssglobal.revalida.codes.model.Public;
import org.ssglobal.revalida.codes.model.tables.records.SubjectRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Subject extends TableImpl<SubjectRecord> {

    private static final long serialVersionUID = -220459294;

    /**
     * The reference instance of <code>public.subject</code>
     */
    public static final Subject SUBJECT = new Subject();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubjectRecord> getRecordType() {
        return SubjectRecord.class;
    }

    /**
     * The column <code>public.subject.subject_id</code>.
     */
    public final TableField<SubjectRecord, Integer> SUBJECT_ID = createField(DSL.name("subject_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.subject.subject_code</code>.
     */
    public final TableField<SubjectRecord, String> SUBJECT_CODE = createField(DSL.name("subject_code"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.subject.subject_title</code>.
     */
    public final TableField<SubjectRecord, String> SUBJECT_TITLE = createField(DSL.name("subject_title"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.subject.unit</code>.
     */
    public final TableField<SubjectRecord, Integer> UNIT = createField(DSL.name("unit"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.subject.active_deactive</code>.
     */
    public final TableField<SubjectRecord, Boolean> ACTIVE_DEACTIVE = createField(DSL.name("active_deactive"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * Create a <code>public.subject</code> table reference
     */
    public Subject() {
        this(DSL.name("subject"), null);
    }

    /**
     * Create an aliased <code>public.subject</code> table reference
     */
    public Subject(String alias) {
        this(DSL.name(alias), SUBJECT);
    }

    /**
     * Create an aliased <code>public.subject</code> table reference
     */
    public Subject(Name alias) {
        this(alias, SUBJECT);
    }

    private Subject(Name alias, Table<SubjectRecord> aliased) {
        this(alias, aliased, null);
    }

    private Subject(Name alias, Table<SubjectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Subject(Table<O> child, ForeignKey<O, SubjectRecord> key) {
        super(child, key, SUBJECT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<SubjectRecord> getPrimaryKey() {
        return Keys.SUBJECT_PKEY;
    }

    @Override
    public List<UniqueKey<SubjectRecord>> getKeys() {
        return Arrays.<UniqueKey<SubjectRecord>>asList(Keys.SUBJECT_PKEY);
    }

    @Override
    public Subject as(String alias) {
        return new Subject(DSL.name(alias), this);
    }

    @Override
    public Subject as(Name alias) {
        return new Subject(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Subject rename(String name) {
        return new Subject(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Subject rename(Name name) {
        return new Subject(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, Integer, Boolean> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
